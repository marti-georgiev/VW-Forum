@using VWForum.Web.Models.Thread
@model ThreadCreateModel

<div class="thread-create-form">
    <h2>Създаване на нова тема</h2>

    <form id="create-thread-form" asp-controller="Thread" asp-action="Create" method="post">
        <div class="form-group">
            <label asp-for="@Model.Title">Заглавие</label>
            <input asp-for="@Model.Title" class="form-control" aria-required="true" placeholder="Име на поста..." required />
        </div>

        <div class="form-group">
            <label asp-for="@Model.Content">Съдържание</label>
            <textarea asp-for="@Model.Content" class="form-control" aria-required="true" placeholder="Текст..." required></textarea>
        </div>

        <div class="form-group">
            <label asp-for="@Model.Tags">Тагове</label>
            <div class="forum-tags-input">
                <div class="created-tags"></div>
                <input type="hidden" asp-for="@Model.Tags" id="tags-hidden" />
                <input class="form-tags-input-field" maxlength="20" placeholder="Добави таг..." />
            </div>
        </div>

        <div class="form-group">
            <label asp-for="@Model.CommunityId" class="d-block form-label fw-bold">Групи</label>
            <select asp-for="@Model.CommunityId" class="form-control community-dropdown" required>
                <option value="">-- Избери група --</option>
                <option value="1">VW Club</option>
                <option value="2">Golf MK4 Community</option>
                <option value="3">VW TDI Enthusiasts</option>
                <option value="4">Performance & Tuning</option>
            </select>
        </div>

        <button type="submit" class="btn-submit">Създай тема</button>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const tagsContainer = document.querySelector('.created-tags');
        const tagInputField = document.querySelector('.form-tags-input-field');
        const hiddenTagsInput = document.getElementById('tags-hidden');
        let currentTags = [];

        if (tagInputField) {
            tagInputField.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    e.preventDefault();
                    let tagValue = e.target.value.trim().toLowerCase();

                    if (tagValue && !currentTags.includes(tagValue)) {
                        currentTags.push(tagValue);
                        updateTags();
                    }
                    e.target.value = '';
                }
            });
        }

        function updateTags() {
            tagsContainer.innerHTML = '';
            currentTags.forEach(tag => {
                let tagSpan = document.createElement('span');
                tagSpan.classList.add('created-tag');
                tagSpan.innerText = `#${tag}`;

                let removeBtn = document.createElement('span');
                removeBtn.innerText = ' ✖';
                removeBtn.classList.add('remove-tag');
                removeBtn.addEventListener('click', () => removeTag(tag));

                tagSpan.appendChild(removeBtn);
                tagsContainer.appendChild(tagSpan);
            });

            hiddenTagsInput.value = currentTags.join(',');
        }

        function removeTag(tag) {
            currentTags = currentTags.filter(t => t !== tag);
            updateTags();
        }
    });
</script>
